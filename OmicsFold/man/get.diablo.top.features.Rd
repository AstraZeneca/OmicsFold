% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/feature_loadings.R
\name{get.diablo.top.features}
\alias{get.diablo.top.features}
\title{Get DIABLO top features by normalised stability}
\usage{
get.diablo.top.features(trained.model, perf.result, feature.count = Inf)
}
\arguments{
\item{trained.model}{A multiomics DIABLO model.}

\item{perf.result}{The results from a perf test on the above model.}

\item{feature.count}{The number of highest ranking features to include in the
data frame.}
}
\value{
A data frame containing the top features from the model across all
blocks and component.
}
\description{
Get a data frame which shows the highest ranking features across blocks and
components in a perf result from a DIABLO model. This uses the stability of
features in each block / component as a ranking factor but these are not
directly comparable because they are also influenced by the value of keepX in
each block and component with respect to the number of features in that
block. If, for example, keepX were the same value as the number of features
in a block, all features will have a stability of 1.0 regardless of their
importance to the model.

A correction factor is therefore applied here for ranking purposes. The
ranking score is calculated by comparing the stability to the expected
frequency of selection based on the binomial distribution. The difference is
then corrected using log transformations to give a final rank score between
-1 and 1. A negative score indicates anti-selection of the feature, while a
positive score indicates active selection of the feature above the expected
average.

The score used for ranking is the maximum positive score for that feature
when this correction is applied to all components.
}
\examples{
\dontrun{
get.diablo.top.features(diablo.model, diablo.perf.result, feature.count = 20)
}
}
